AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Architecture for Three-layer model
Metadata:
  AWS::ServerlessRepo::Application:
    Name: three-tier-app-sample
    Description: A sample template of a three tier application for sam-app.
    Author: Eiji KOMINAMI
    SpdxLicenseId: MIT
    Labels:
    - apigateway
    - kinesis
    - dynamodb
    - lambda
    HomePageUrl: https://github.com/eijikominami/
    SemanticVersion: 2.1.3
    SourceCodeUrl: https://github.com/eijikominami/aws-cloudformation-samples/tree/master/three-tier-app/sam-app/
Globals:
  Function:
    Environment:
      Variables:
        DATA_DB_NAME:
          Ref: DynamoDBData
    Handler: lambda_function.lambda_handler
    Layers:
    - Fn::Sub: arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension-Arm64:2
    Runtime: python3.10
    Tracing: Active
Parameters:
  AccessControlAllowOrigin:
    Type: String
    Default: '*'
    Description: Domain Name attached with Access-Control-Allow-Origin
  AccessControlExposeHeaders:
    Type: String
    Default: Date
    Description: Response Header attached with Access-Control-Expose-Headers
  KinesisStreamRetentionPeriodHours:
    Type: Number
    Default: 24
    MinValue: 24
    MaxValue: 168
    Description: Retention Period Hours in Kinesis Data Streams
  KinesisStreamShardCount:
    Type: Number
    Default: 1
    MinValue: 1
    Description: Shard Count in Kinesis Data Streams
  LambdaGetRecordsBatchSize:
    Type: Number
    Default: 1000
    MinValue: 1
    MaxValue: 1000
    Description: Batch Size in Lambda
  Environment:
    Type: String
    Default: development
    AllowedValues:
    - production
    - test
    - development
  TagKey:
    Type: String
    Default: createdby
  TagValue:
    Type: String
    Default: aws-cloudformation-samples
Resources:
  IAMRoleForAPIGatewayAccessToCloudWatchLogs:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Description: API Gateway to access to CloudWatch Logs.
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      RoleName:
        Fn::Sub: ThreeTierApp-SAM-APIGateway-CloudWatch-${AWS::Region}
      Tags:
      - Key: environment
        Value:
          Ref: Environment
      - Key:
          Ref: TagKey
        Value:
          Ref: TagValue
    Metadata:
      SamResourceId: IAMRoleForAPIGatewayAccessToCloudWatchLogs
  IAMRoleForAPIGatewayInvokeFunctionLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Description: API Gateway to invoke Lambda.
      Policies:
      - PolicyName:
          Fn::Sub: ThreeTierApp-SAM-APIGatewayInvokeFunctionLambda-${AWS::Region}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: '*'
      RoleName:
        Fn::Sub: ThreeTierApp-SAM-APIGateway-Lambda-${AWS::Region}
      Tags:
      - Key: environment
        Value:
          Ref: Environment
      - Key:
          Ref: TagKey
        Value:
          Ref: TagValue
    Metadata:
      SamResourceId: IAMRoleForAPIGatewayInvokeFunctionLambda
  IAMRoleForAPIGatewayAccessToKinesis:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Description: API Gateway to access Kinesis.
      Policies:
      - PolicyName:
          Fn::Sub: ThreeTierApp-SAM-APIGatewayAccessToKinesis-${AWS::Region}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - kinesis:PutRecord
            - kinesis:PutRecords
            Resource:
              Fn::GetAtt:
              - Kinesis
              - Arn
      RoleName:
        Fn::Sub: ThreeTierApp-SAM-APIGateway-Kinesis-${AWS::Region}
      Tags:
      - Key: environment
        Value:
          Ref: Environment
      - Key:
          Ref: TagKey
        Value:
          Ref: TagValue
    Metadata:
      SamResourceId: IAMRoleForAPIGatewayAccessToKinesis
  IAMRoleForLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Description: Lambda to access X-Ray, DynamoDB, Kinesis and CloudWatch Logs.
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      - arn:aws:iam::aws:policy/AmazonKinesisReadOnlyAccess
      Policies:
      - PolicyName:
          Fn::Sub: ThreeTierApp-SAM-AWSLambdaBasicExecutionRole-${AWS::Region}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - kinesis:PutRecord
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
      RoleName:
        Fn::Sub: ThreeTierApp-SAM-ExecuteLambda-${AWS::Region}
      Tags:
      - Key: environment
        Value:
          Ref: Environment
      - Key:
          Ref: TagKey
        Value:
          Ref: TagValue
    Metadata:
      SamResourceId: IAMRoleForLambda
  ApiAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
        - IAMRoleForAPIGatewayAccessToCloudWatchLogs
        - Arn
    Metadata:
      SamResourceId: ApiAccount
  Api:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn:
          Fn::GetAtt:
          - CloudWatchLogsGroupForApiGateway
          - Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "caller":"$context.identity.caller", "user":"$context.identity.user","requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath",
          "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength"
          }'
      CacheClusterEnabled: false
      DefinitionBody:
        openapi: 3.0.1
        info:
          title:
            Ref: AWS::StackName
          description: Endpoint of Three-layer model.
        paths:
          /user:
            post:
              operationId: Post
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Post'
                required: true
              responses:
                '500':
                  description: 500 response
                  headers:
                    Access-Control-Expose-Headers:
                      schema:
                        type: string
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Empty'
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Expose-Headers:
                      schema:
                        type: string
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Empty'
              x-amazon-apigateway-request-validator: BodyCheckingOnly
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt:
                  - IAMRoleForAPIGatewayAccessToKinesis
                  - Arn
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:kinesis:action/PutRecord
                responses:
                  '200':
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Expose-Headers:
                        Fn::Sub: '''${AccessControlExposeHeaders}'''
                      method.response.header.Access-Control-Allow-Origin:
                        Fn::Sub: '''${AccessControlAllowOrigin}'''
                  default:
                    statusCode: '500'
                    responseParameters:
                      method.response.header.Access-Control-Expose-Headers:
                        Fn::Sub: '''${AccessControlExposeHeaders}'''
                      method.response.header.Access-Control-Allow-Origin:
                        Fn::Sub: '''${AccessControlAllowOrigin}'''
                passthroughBehavior: when_no_templates
                httpMethod: POST
                requestTemplates:
                  application/json: "#set($data = $input.json('$'))\n{\n    \"StreamName\"\
                    : \"ThreeTierApp-SAM\",\n    \"PartitionKey\": \"$input.path('$.user_id')\"\
                    ,\n    \"Data\": \"$util.base64Encode($data)\"\n}"
                type: aws
            options:
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Expose-Headers:
                      schema:
                        type: string
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
                    Access-Control-Allow-Headers:
                      schema:
                        type: string
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Expose-Headers:
                        Fn::Sub: '''${AccessControlExposeHeaders}'''
                      method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Origin:
                        Fn::Sub: '''${AccessControlAllowOrigin}'''
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
          /user/{user_id}:
            get:
              operationId: Get
              parameters:
              - name: user_id
                in: path
                required: true
                schema:
                  type: string
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Expose-Headers:
                      schema:
                        type: string
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Empty'
              x-amazon-apigateway-request-validator: ParameterCheckingOnly
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt:
                  - IAMRoleForAPIGatewayInvokeFunctionLambda
                  - Arn
                uri:
                  Fn::Join:
                  - ''
                  - - 'arn:aws:apigateway:'
                    - Ref: AWS::Region
                    - :lambda:path/2015-03-31/functions/
                    - Fn::GetAtt:
                      - LambdaGetData
                      - Arn
                    - /invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
        components:
          schemas:
            Empty:
              title: Empty Schema
              type: object
            Post:
              title: Root Schema
              required:
              - group_id
              - user_id
              type: object
              properties:
                user_id:
                  title: User Id
                  maxLength: 1024
                  minLength: 1
                  pattern: ^(.*)$
                  type: string
                group_id:
                  title: Group Id
                  maxLength: 1024
                  minLength: 1
                  pattern: ^(.*)$
                  type: string
        x-amazon-apigateway-request-validators:
          BodyCheckingOnly:
            validateRequestParameters: false
            validateRequestBody: true
          ParameterCheckingOnly:
            validateRequestParameters: true
            validateRequestBody: false
      EndpointConfiguration: EDGE
      MethodSettings:
      - DataTraceEnabled: true
        HttpMethod: '*'
        LoggingLevel: INFO
        MetricsEnabled: true
        ResourcePath: /*
      OpenApiVersion: 3.0.1
      StageName: Prod
      TracingEnabled: true
      Variables:
        alias: Prod
    Metadata:
      SamResourceId: Api
  Kinesis:
    Type: AWS::Kinesis::Stream
    Properties:
      Name:
        Ref: AWS::StackName
      RetentionPeriodHours:
        Ref: KinesisStreamRetentionPeriodHours
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis
      ShardCount:
        Ref: KinesisStreamShardCount
      Tags:
      - Key: environment
        Value:
          Ref: Environment
      - Key:
          Ref: TagKey
        Value:
          Ref: TagValue
    Metadata:
      SamResourceId: Kinesis
  DynamoDBData:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: user_id
        AttributeType: S
      - AttributeName: group_id
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: user_id
        KeyType: HASH
      - AttributeName: group_id
        KeyType: RANGE
      SSESpecification:
        SSEEnabled: true
      TableName: ThreeTierApp-SAM-data
      Tags:
      - Key: environment
        Value:
          Ref: Environment
      - Key:
          Ref: TagKey
        Value:
          Ref: TagValue
    Metadata:
      SamResourceId: DynamoDBData
  LambdaPutData:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
      - arm64
      CodeUri: s3://eijikominami/aws-cloudformation-samples/three-tier-app/9a5e5dd2308a2f13d93ab21db32096e5
      Description: "\u30C7\u30FC\u30BF\u3092Kinesis\u304B\u3089\u53D6\u5F97\u3057\
        DynamoDB\u306B\u66F8\u304D\u8FBC\u307F\u307E\u3059"
      Events:
        KinesisEvent:
          Properties:
            BatchSize:
              Ref: LambdaGetRecordsBatchSize
            Enabled: true
            StartingPosition: TRIM_HORIZON
            Stream:
              Fn::GetAtt:
              - Kinesis
              - Arn
          Type: Kinesis
      FunctionName: putData-ThreeTierApp-SAM
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - IAMRoleForLambda
        - Arn
      Timeout: 30
    Metadata:
      SamResourceId: LambdaPutData
  LambdaGetData:
    DependsOn:
    - CloudWatchLogsGroupForApiGateway
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
      - arm64
      CodeUri: s3://eijikominami/aws-cloudformation-samples/three-tier-app/41bcf73da98027b7bec5a3ad07a25198
      Description: "\u30C7\u30FC\u30BF\u3092DynamoDB\u304B\u3089\u53D6\u5F97\u3057\
        API Gateway\u306B\u8FD4\u5374\u3057\u307E\u3059"
      Environment:
        Variables:
          ACCESS_CONTROL_ALLOW_ORIGIN:
            Ref: AccessControlAllowOrigin
          ACCESS_CONTROL_EXPOSE_HEADERS:
            Ref: AccessControlExposeHeaders
      FunctionName: getData-ThreeTierApp-SAM
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - IAMRoleForLambda
        - Arn
      Timeout: 30
    Metadata:
      SamResourceId: LambdaGetData
  CloudWatchLogsGroupForApiGateway:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/apigateway/ThreeTierApp-SAM
      RetentionInDays: 365
    Metadata:
      SamResourceId: CloudWatchLogsGroupForApiGateway
Outputs:
  APIGatewayEndpointURL:
    Description: API Gateway Endpoint URL
    Value:
      Fn::Sub: ${Api}.execute-api.${AWS::Region}.amazonaws.com
