AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: AWSCloudFormationTemplates/euc/workspaces sets Amazon Workspaces.

Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups: 
      - Label: 
          default: 'Microsoft Active Directory Configuration'
        Parameters: 
          - ActiveDirectoryEdition
          - ActiveDirectoryEnableSso
          - ActiveDirectoryId
          - ActiveDirectoryName
          - ActiveDirectoryPassword
          - ActiveDirectoryShortName
      - Label: 
          default: 'VPC Configuration'
        Parameters: 
          - SubnetPrivateCidrBlockForAz1
          - SubnetPrivateCidrBlockForAz2
          - SubnetPublicCidrBlockForAz1
          - SubnetPublicCidrBlockForAz2
          - SubnetTransitCidrBlockAz1
          - SubnetTransitCidrBlockAz2
          - TransitGatewayId
          - TransitGatewayDestinationCidrBlock
          - VPCCidrBlock
      - Label: 
          default: 'Workspaces Configuration'
        Parameters: 
          - Deploy
          - BundleId
          - ComputeTypeName
          - RootVolumeSizeGib
          - RunningMode
          - RunningModeAutoStopTimeoutInMinutes
          - UserName
          - UserVolumeSizeGib
      - Label: 
          default: 'Notification Configuration'
        Parameters: 
          - SNSForAlertArn
          - SNSForDeploymentArn
      - Label: 
          default: 'Tag Configuration'
        Parameters:
          - Environment 
          - TagKey
          - TagValue

Parameters:
  ActiveDirectoryEdition:
    Type: String
    Default: Standard
    AllowedValues:
      - Enterprise
      - Standard
    Description: The edition of AWS Directory Service for Microsoft Active Directory [conditional]
  ActiveDirectoryEnableSso:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    Description: Whether to enable single sign-on for a Microsoft Active Directory in AWS [conditional]
  ActiveDirectoryName:
    Type: String
    Default: corp.example.com
    AllowedPattern: ^([a-zA-Z0-9]+[\\.-])+([a-zA-Z0-9])+$
    Description: The fully qualified domain name for the AWS Managed Microsoft AD directory [conditional]
  ActiveDirectoryPassword:
    Type: String
    Default: Password1+
    AllowedPattern: (?=^.{8,64}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9\s])(?=.*[a-z])|(?=.*[^A-Za-z0-9\s])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9\s]))^.*
    NoEcho: true
    Description: The password for the default administrative user named Admin [conditional]
  ActiveDirectoryShortName:
    Type: String
    Default: CORP
    AllowedPattern: ^[^\\/:*?"<>|.]+[^\\/:*?"<>|]*$
    Description: The NetBIOS name for your domain [conditional]
  ActiveDirectoryId:
    Type: String
    Default: ''
    Description: The identifier of the AWS Directory Service directory for the WorkSpace [conditional]
  Deploy:
    Type: String
    Default: VPC_DIRECTORY
    AllowedValues:
      - VPC_ONLY
      - VPC_DIRECTORY
      - VPC_DIRECTORY_WORKSPACES
    Description: The scope of the deploy. Amazon Workspaces can be built after you register a directory manually. [required]
  BundleId:
    Type: String
    Default: wsb-w94f3tgkh
    Description: The identifier of the bundle for the WorkSpace [required]
  ComputeTypeName:
    Type: String
    Default: PERFORMANCE
    AllowedValues:
      - GRAPHICS
      - GRAPHICS_G4DN
      - GRAPHICSPRO
      - GRAPHICSPRO_G4DN
      - PERFORMANCE
      - POWER
      - POWERPRO
      - STANDARD
      - VALUE
    Description: The compute type [required]
  RootVolumeSizeGib:
    Type: Number
    Default: 80
    Description: The size of the root volume [required]  
  RunningMode:
    Type: String
    Default: AUTO_STOP
    AllowedValues:
      - ALWAYS_ON
      - AUTO_STOP
      - MANUAL
    Description: The identifier of the bundle for the WorkSpace [required]
  RunningModeAutoStopTimeoutInMinutes:
    Type: Number
    Default: 60
    Description: The time after a user logs off when WorkSpaces are automatically stopped [required]
  SubnetPrivateCidrBlockForAz1:
    Type: String
    Default: 10.2.8.0/23
    AllowedPattern: ^[0-9./]*$
    Description: The public subnet CIDR block at AZ1 [required]
  SubnetPrivateCidrBlockForAz2:
    Type: String
    Default: 10.2.12.0/23
    AllowedPattern: ^[0-9./]*$
    Description: The public subnet CIDR block at AZ2 [required]
  SubnetPublicCidrBlockForAz1:
    Type: String
    Default: 10.2.10.0/24
    Description: The public subnet CIDR block at AZ1
  SubnetPublicCidrBlockForAz2:
    Type: String
    Default: 10.2.14.0/24
    Description: The public subnet CIDR block at AZ2
  SubnetTransitCidrBlockAz1:
    Type: String
    Default: 10.2.11.0/24
    Description: The transit subnet CIDR block at AZ1
  SubnetTransitCidrBlockAz2:
    Type: String
    Default: 10.2.15.0/24
    Description: The transit subnet CIDR block at AZ2
  TransitGatewayId:
    Type: String
    Default: ''
    Description: The ID of a transit gateway
  TransitGatewayDestinationCidrBlock:
    Type: String
    Default: ''
    Description: The IPv4 CIDR block forward to TransitGateway
  UserName:
    Type: String
    Default: unknown
    AllowedPattern: .+
    Description: The user name of the user for the WorkSpace [required]
  UserVolumeSizeGib:
    Type: Number
    Default: 100
    Description: The size of the user storage [required]  
  VPCCidrBlock:
    Type: String
    Default: 10.2.8.0/21
    AllowedPattern: ^[0-9./]*$
    Description: The VPC CIDR block [required]
  SNSForAlertArn:
    Type: String
    Default: '' 
  SNSForDeploymentArn:
    Type: String
    Default: ''
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - production
      - test
      - development
  TagKey:
    Type: String
    Default: createdby
    AllowedPattern: .+
  TagValue:
    Type: String
    Default: aws-cloudformation-samples
    AllowedPattern: .+

Conditions:
  CreateDirectory: !And [ !Equals [ !Ref ActiveDirectoryId, ''], !Or [ !Equals [ !Ref Deploy, VPC_DIRECTORY], !Equals [ !Ref Deploy, VPC_DIRECTORY_WORKSPACES] ] ]
  CreateSNSForAlert: !Equals [ !Ref SNSForAlertArn, '']
  CreateSNSForDeployment: !Equals [ !Ref SNSForDeploymentArn, '']
  CreatePublicSubnet: !Or [ !Not [ !Equals [ !Ref SubnetPublicCidrBlockForAz1, ''] ], !Not [ !Equals [ !Ref SubnetPublicCidrBlockForAz2, ''] ] ]
  CreateTransitGateway: !And [ !Not [ !Equals [ !Ref TransitGatewayId, '' ] ], !Not [ !Equals [ !Ref TransitGatewayDestinationCidrBlock, '' ] ] ]
  CreateWorkspaces: !Equals [ !Ref Deploy, VPC_DIRECTORY_WORKSPACES]
  Development: !Equals [ !Ref Environment, development]

Resources:
  # Nested Stack
  Az1:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/availability-zone
        SemanticVersion: 2.0.69
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        AvailabilityZone: !Select 
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
        InternetGatewayId: !If
          - CreatePublicSubnet
          - !Ref InternetGateway
          - ''
        LogicalNamePrefix: !Ref AWS::StackName
        NetworkAddressTranslation: !If
          - CreatePublicSubnet
          - ENABLED
          - DISABLED
        SubnetPrivateCidrBlock: !Ref SubnetPrivateCidrBlockForAz1
        SubnetPublicCidrBlock: !Ref SubnetPublicCidrBlockForAz1
        SubnetTransitCidrBlock: !Ref SubnetTransitCidrBlockAz1
        SNSForAlertArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        SNSForDeploymentArn: !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn   
        VPCId: !Ref VPC
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  Az2:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/availability-zone
        SemanticVersion: 2.0.69
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        AvailabilityZone: !Select
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
        InternetGatewayId: !If
          - CreatePublicSubnet
          - !Ref InternetGateway
          - ''
        LogicalNamePrefix: !Ref AWS::StackName
        NetworkAddressTranslation: !If
          - CreatePublicSubnet
          - ENABLED
          - DISABLED
        SubnetPrivateCidrBlock: !Ref SubnetPrivateCidrBlockForAz2
        SubnetPublicCidrBlock: !Ref SubnetPublicCidrBlockForAz2
        SubnetTransitCidrBlock: !Ref SubnetTransitCidrBlockAz2
        SNSForAlertArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        SNSForDeploymentArn: !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn 
        VPCId: !Ref VPC
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue 
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  MicrosoftAD:
    Condition: CreateDirectory
    Type: AWS::CloudFormation::Stack
    Properties:
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters: 
        Edition: !Ref ActiveDirectoryEdition
        EnableSso: !Ref ActiveDirectoryEnableSso
        LogicalNamePrefix: !Ref AWS::StackName
        Name: !Ref ActiveDirectoryName
        Password: !Ref ActiveDirectoryPassword
        ShortName: !Ref ActiveDirectoryShortName
        SubnetPrivateIdForAz1: !GetAtt Az1.Outputs.PrivateSubnetId
        SubnetPrivateIdForAz2: !GetAtt Az2.Outputs.PrivateSubnetId
        VPCId: !Ref VPC
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue
      TemplateURL: !If
        - Development
        - https://s3.amazonaws.com/eijikominami-test/aws-cloudformation-templates/identity/microsoftad.yaml
        - https://s3.amazonaws.com/eijikominami/aws-cloudformation-templates/identity/microsoftad.yaml
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  SNSForAlert:
    Condition: CreateSNSForAlert
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.0.69
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        TopicName: !Sub Alert-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  SNSForDeployment:
    Condition: CreateSNSForDeployment
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.0.69
      Parameters:
        TopicName: !Sub Deployment-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  # IAM
  IAMRoleForVPCFlowLog:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Description: A role required for VPC FlowLog.
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: '*'
      RoleName: !Sub ${AWS::StackName}-AWSVPCFlowLogRole-${AWS::Region}
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VPCCidrBlock
      # VPC endpoint uses a private DNS.
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub vpc-${AWS::StackName}-${AWS::Region}
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties: 
      DeliverLogsPermissionArn: !GetAtt IAMRoleForVPCFlowLog.Arn
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref CloudWatchLogsGroupForVPCFlowLog
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  RoutePrivateToNATGatewayAz1:
    Condition: CreatePublicSubnet
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !GetAtt Az1.Outputs.NatGatewayId
      RouteTableId: !GetAtt Az1.Outputs.RouteTableIdPrivate
  RoutePrivateToNATGatewayAz2:
    Condition: CreatePublicSubnet
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !GetAtt Az2.Outputs.NatGatewayId
      RouteTableId: !GetAtt Az2.Outputs.RouteTableIdPrivate
  RoutePrivateToTransitGatewayAz1:
    Condition: CreateTransitGateway
    DependsOn:
      - TransitGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref TransitGatewayDestinationCidrBlock
      TransitGatewayId: !Ref TransitGatewayId
      RouteTableId: !If
        - CreateDirectory
        - !GetAtt MicrosoftAD.Outputs.RouteTableIdPrivateAz1
        - !GetAtt Az1.Outputs.RouteTableIdPrivate
  RoutePrivateToTransitGatewayAz2:
    Condition: CreateTransitGateway
    DependsOn:
      - TransitGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref TransitGatewayDestinationCidrBlock
      TransitGatewayId: !Ref TransitGatewayId
      RouteTableId: !If
        - CreateDirectory
        - !GetAtt MicrosoftAD.Outputs.RouteTableIdPrivateAz2
        - !GetAtt Az2.Outputs.RouteTableIdPrivate
  # Internet GW
  InternetGateway:
    Condition: CreatePublicSubnet
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: !Sub igw-${AWS::StackName}-${AWS::Region}
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  InternetGatewayAttachment:
    Condition: CreatePublicSubnet
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  # Peering connections with Transit Gateway and VPC for outbound traffic
  TransitGatewayAttachment:
    Condition: CreateTransitGateway
    Type: AWS::EC2::TransitGatewayAttachment
    Properties: 
      SubnetIds:
        - !GetAtt Az1.Outputs.TransitSubnetId
        - !GetAtt Az2.Outputs.TransitSubnetId
      Tags:
        - Key: Name
          Value: !Sub tgw-attach-${AWS::StackName}-${AWS::Region}
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      TransitGatewayId: !Ref TransitGatewayId
      VpcId: !Ref VPC
  RouteTransitToTransitGatewayAz1:
    Condition: CreateTransitGateway
    DependsOn:
      - TransitGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref TransitGatewayDestinationCidrBlock
      TransitGatewayId: !Ref TransitGatewayId
      RouteTableId: !GetAtt Az1.Outputs.RouteTableIdTransit
  RouteTransitToTransitGatewayAz2:
    Condition: CreateTransitGateway
    DependsOn:
      - TransitGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref TransitGatewayDestinationCidrBlock
      TransitGatewayId: !Ref TransitGatewayId
      RouteTableId: !GetAtt Az2.Outputs.RouteTableIdTransit
  # Workspaces
  Workspace:
    Condition: CreateWorkspaces
    Type: AWS::WorkSpaces::Workspace
    Properties: 
      BundleId: !Ref BundleId
      DirectoryId: !If
        - CreateDirectory
        - !GetAtt MicrosoftAD.Outputs.MicrosoftAdId
        - !Ref ActiveDirectoryId
      RootVolumeEncryptionEnabled: false
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      UserName: !Ref UserName
      UserVolumeEncryptionEnabled: false
      WorkspaceProperties: 
        ComputeTypeName: !Ref ComputeTypeName
        RootVolumeSizeGib: !Ref RootVolumeSizeGib
        RunningMode: !Ref RunningMode
        RunningModeAutoStopTimeoutInMinutes: !Ref RunningModeAutoStopTimeoutInMinutes
        UserVolumeSizeGib: !Ref UserVolumeSizeGib
  # CloudWatch
  CloudWatchLogsGroupForVPCFlowLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/vpc/${AWS::StackName}'
      RetentionInDays: 60
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  CloudWatchAlarmTransitGatewayAttachment:
    Condition: CreateTransitGateway
    Type: AWS::Serverless::Application
    Properties:
      Parameters:
        CustomAlarmName: !Ref AWS::StackName
        SNSTopicArn: !If 
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        TransitGatewayId: !Ref TransitGatewayId
        TransitGatewayAttachmentId: !Ref TransitGatewayAttachment
      NotificationARNs: 
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-transitgateway-attachment
        SemanticVersion: 2.0.69
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  CloudWatchAlarmWorkspaces:
    Type: AWS::Serverless::Application
    Properties:
      Parameters:
        CustomAlarmName: !Ref AWS::StackName
        DirectoryId: !If
          - CreateDirectory
          - !GetAtt MicrosoftAD.Outputs.MicrosoftAdId
          - !Ref ActiveDirectoryId
        SNSTopicArn: !If 
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
      NotificationARNs: 
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-workspaces
        SemanticVersion: 2.0.69
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue

Outputs:
  DirectoryId:
    Description: The logical id of the Active Directory
    Value: !If
      - CreateDirectory
      - !GetAtt MicrosoftAD.Outputs.MicrosoftAdId
      - !Ref ActiveDirectoryId
  VpcId:
    Description: The logical id of the VPC
    Value: !Ref VPC
  WorkspacesId:
    Description: The logical id of the workspace
    Value: !If
      - CreateWorkspaces
      - !Ref Workspace
      - ''