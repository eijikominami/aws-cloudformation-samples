AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWSCloudFormationSamples/iot/iot-1click creates an environment to send messages trigged by AWS IoT 1-Click button.

Parameters:
  IoT1ClickDeviceId:
    Type: String
    AllowedPattern: .+
    Description: The ID of the device [required]
  IoT1ClickDeviceEnabled:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    Description: A Boolean value indicating whether the device is enabled [required]
  Language:
    Type: String
    Default: EN
    AllowedValues:
      - EN
      - JP
    Description: The display language [required]
  PhoneNumbers:
    Type: CommaDelimitedList
    Description: The phone number of an SMS-enabled device [required]
  SNSForAlertArn:
    Type: String
    Default: ''
    Description: Amazon SNS Topic ARN for alert
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - production
      - test
      - development
  TagKey:
    Type: String
    Default: createdby
  TagValue:
    Type: String
    Default: aws-cloudformation-samples
    AllowedPattern: .+

Conditions:
  CreateSNSForAlert: !Equals [ !Ref SNSForAlertArn, '']

Resources:
  # Nested Stack
  SNSForAlert:
    Condition: CreateSNSForAlert
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.1.5
      Parameters:
        TopicName: !Sub Alert-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  IAMRoleForLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: Lambda to access X-Ray, DynamoDB, Kinesis and CloudWatch Logs.
      # Managed Policy
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: CloudWatchLambdaInsightsExecutionRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:log-group:/aws/lambda-insights:*
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: '*' 
        - PolicyName: SNS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:publish
                Resource:
                  - '*'
      RoleName: !Sub ${AWS::StackName}-Lambda-${AWS::Region}
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  Button:
    Type: AWS::IoT1Click::Device
    Properties: 
      DeviceId: !Ref IoT1ClickDeviceId
      Enabled: !Ref IoT1ClickDeviceEnabled
  Project:
    DependsOn:
      - LambdaPermission
    Type: AWS::IoT1Click::Project
    Properties: 
      Description: !Sub Sample project created by ${TagValue}.
      PlacementTemplate: 
        DefaultAttributes:
          createdby: !Ref TagValue
        DeviceTemplates:
          sample-device:
            DeviceType: button
            CallbackOverrides:
              onClickCallback: !GetAtt Lambda.Arn
      ProjectName: sample-project
  Placement:
    Type: AWS::IoT1Click::Placement
    Properties: 
      AssociatedDevices:
        sample-device: !GetAtt Button.DeviceId
      PlacementName: sample-placement
      ProjectName: !GetAtt Project.ProjectName
  Lambda:
    DependsOn:
      - LogGroupForLambda
    Type: AWS::Lambda::Function
    Properties: 
      Architectures:
        - arm64
      Code: 
        ZipFile: |
          import os
          import boto3
          import json
          # Lambda Powertools
          from aws_lambda_powertools import Logger
          from aws_lambda_powertools import Tracer

          # Lambda Powertools
          logger = Logger()
          tracer = Tracer()

          @logger.inject_lambda_context(log_event=True)
          @tracer.capture_lambda_handler
          def lambda_handler(event, context):

            if os.environ['LANGUAGE'] is 'EN':
              message = 'A button clicked. Type: ' + event['deviceEvent']['buttonClicked']['clickType']
            else:
              message = 'ボタンがクリックされました。 タイプ: ' + event['deviceEvent']['buttonClicked']['clickType']

            sns = boto3.client('sns')
            phone_numbers = os.environ['PHONE_NUMBERS'].replace(' ', '').split(',')
            for phone_number in phone_numbers:
              message_attributes = {
                  'AWS.SNS.SMS.SenderID': {
                      'DataType': 'String',
                      'StringValue': os.environ['SENDER_ID']
                  }
              }
              logger.structure_logs(append=True, event=event)
              logger.info("Transfered a message to a SNS topic.") 
              sns.publish(
                PhoneNumber=phone_number,
                Message=message,
                MessageAttributes=message_attributes
              )

      Description: IoT 1-Click ボタン送信児にSNSにメッセージを送信します
      Environment:
        Variables:
          LANGUAGE: !Ref Language 
          PHONE_NUMBERS: !Join
            - ','
            - !Ref PhoneNumbers
          SENDER_ID: !Ref AWS::StackName
      FunctionName: sendMessageTriggedByIot1Click
      Handler: index.lambda_handler
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:12
      MemorySize: 128
      Role: !GetAtt IAMRoleForLambda.Arn
      Runtime: python3.9
      Timeout: 30
      TracingConfig: 
        Mode: Active
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref Lambda
      Principal: iot1click.amazonaws.com
      SourceArn: !Sub arn:aws:iot1click:${AWS::Region}:${AWS::AccountId}:projects/sample-project
  LogGroupForLambda:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /aws/lambda/sendMessageTriggedByIot1Click
      RetentionInDays: 60
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # CloudWatch Alarm for Lambda
  AlarmLambda:
    Type: AWS::Serverless::Application
    Properties:
      Parameters:
        CustomAlarmName: !Ref AWS::StackName
        SNSTopicArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        MetricFilterPattern: ''
        FunctionResouceName: !Ref Lambda
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-lambda
        SemanticVersion: 2.1.5
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  AlarmSNSNumberOfNotificationsFailed:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
      AlarmDescription: '*SNS* (PhoneNumberDirect) で *通知エラー* が発生しています。このエラーの詳細は、<https://docs.aws.amazon.com/ja_jp/sns/latest/dg/sns-monitoring-using-cloudwatch.html|CloudWatchを使用したトピックの監視> をご覧ください。'
      AlarmName: Warning-IoT1Click-SNS-PhoneNumberDirect-NumberOfNotificationsFailed-Occured
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions: 
        - Name: PhoneNumber
          Value: PhoneNumberDirect
      EvaluationPeriods: 1
      MetricName: NumberOfNotificationsFailed
      Namespace: AWS/SNS
      OKActions:
        - !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching