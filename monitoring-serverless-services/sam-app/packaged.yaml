AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Monitoring functions
Globals:
  Function:
    Handler: lambda_function.lambda_handler
    Runtime: python3.8
    Tracing: Active
Parameters:
  KinesisStreamName:
    Type: String
    Default: ''
    Description: "Kinesis \u306E\u30B9\u30C8\u30EA\u30FC\u30E0\u540D"
  ApiName:
    Type: String
    Default: ''
    Description: "API Gateway \u306E API\u540D"
  ApiStageName:
    Type: String
    Default: ''
    Description: "API Gateway \u306E \u30B9\u30C6\u30FC\u30B8\u540D"
  ApiCountThreshold:
    Type: Number
    Default: 0
    MinValue: 0
    Description: "API Gateway \u306E \u5206\u9593\u30AB\u30A6\u30F3\u30C8\u6570\u4E0A\
      \u9650"
  ApiPostResourcePath:
    Type: String
    Default: ''
    Description: "API Gateway \u306E POST\u30E1\u30BD\u30C3\u30C9 \u306E \u30EA\u30BD\
      \u30FC\u30B9\u30D1\u30B9"
  ApiGetResourcePath:
    Type: String
    Default: ''
    Description: "API Gateway \u306E GET\u30E1\u30BD\u30C3\u30C9 \u306E \u30EA\u30BD\
      \u30FC\u30B9\u30D1\u30B9"
  DynamoDBEnabled:
    Type: String
    Default: Disabled
    AllowedValues:
    - Enabled
    - Disabled
    Description: "DynamoDB\u30EA\u30BD\u30FC\u30B9\u304C\u5B58\u5728\u3059\u308B\u304B\
      \u3069\u3046\u304B"
  LambdaFunctionName:
    Type: String
    Default: ''
    Description: "Lambda \u306E \u95A2\u6570\u540D"
  LambdaTimeout:
    Type: Number
    Default: 0
    MinValue: 0
    Description: "Lambda \u306E \u30BF\u30A4\u30E0\u30A2\u30A6\u30C8\u8B66\u544A\u5024\
      \ (msec)"
  SlackHookUrl:
    Type: String
    Default: ''
    Description: "Slack \u306E Hook URL"
  SlackChannelName:
    Type: String
    Default: ''
    Description: "Slack \u306E \u30C1\u30E3\u30F3\u30CD\u30EB\u540D"
Conditions:
  SlackEnabled:
    Fn::And:
    - Fn::Not:
      - Fn::Equals:
        - Ref: SlackHookUrl
        - ''
    - Fn::Not:
      - Fn::Equals:
        - Ref: SlackChannelName
        - ''
Resources:
  IAMRoleForLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Description: A role required for Lambda to access X-Ray, KMS and CloudWatch
        Logs.
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-AWSLambdaBasicExecutionRole-${AWS::Region}
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - kms:Decrypt
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:PutLogEvents
            Resource: '*'
      RoleName:
        Fn::Sub: ${AWS::StackName}-ExecuteLambda-${AWS::Region}
  Kinesis:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        KinesisStreamName:
          Ref: KinesisStreamName
        SNSAlertArn:
          Ref: EnqueteVotesSNSAlert
      NotificationARNs:
      - Ref: EnqueteVotesSNSAlert
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/eijikominami/aws-cloudformation-samples/monitoring-serverless-services/3b8c5b151650b456aa27a26c181298cb.template
  APIGateway:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ApiName:
          Ref: ApiName
        ApiCount:
          Ref: ApiCountThreshold
      NotificationARNs:
      - Ref: EnqueteVotesSNSAlert
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/eijikominami/aws-cloudformation-samples/monitoring-serverless-services/151a02cb6cf80cd233937be03f8297fa.template
  APIGatewayPost:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ApiName:
          Ref: ApiName
        ApiResourcePath:
          Ref: ApiGetResourcePath
        ApiStageName:
          Ref: ApiStageName
        SNSAlertArn:
          Ref: EnqueteVotesSNSAlert
      NotificationARNs:
      - Ref: EnqueteVotesSNSAlert
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/eijikominami/aws-cloudformation-samples/monitoring-serverless-services/6bf710fcdf3372d9793c7e27f545295e.template
  APIGatewayGet:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ApiName:
          Ref: ApiName
        ApiResourcePath:
          Ref: ApiPostResourcePath
        ApiStageName:
          Ref: ApiStageName
        SNSAlertArn:
          Ref: EnqueteVotesSNSAlert
      NotificationARNs:
      - Ref: EnqueteVotesSNSAlert
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/eijikominami/aws-cloudformation-samples/monitoring-serverless-services/e10d291397cf23774d13d6f350aff42f.template
  DynamoDB:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        DynamoDBEnabled:
          Ref: DynamoDBEnabled
        SNSAlertArn:
          Ref: EnqueteVotesSNSAlert
      NotificationARNs:
      - Ref: EnqueteVotesSNSAlert
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/eijikominami/aws-cloudformation-samples/monitoring-serverless-services/01bc735bf90a1a7c75f514aea3a944bc.template
  Lambda:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        FunctionName:
          Ref: LambdaFunctionName
        Timeout:
          Ref: LambdaTimeout
        SNSAlertArn:
          Ref: EnqueteVotesSNSAlert
      NotificationARNs:
      - Ref: EnqueteVotesSNSAlert
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/eijikominami/aws-cloudformation-samples/monitoring-serverless-services/924d1fbb73b6acfdcf0fcf3e9e71c687.template
  LambdaSendSlackMessage:
    Type: AWS::Serverless::Function
    Condition: SlackEnabled
    Properties:
      CodeUri: s3://eijikominami/aws-cloudformation-samples/monitoring-serverless-services/991a29680e24dc3d2e07aff2251aee09
      Description: "CloudWatch\u30A2\u30E9\u30FC\u30E0\u306E\u5185\u5BB9\u3092Slack\u306B\
        \u9001\u4FE1\u3057\u307E\u3059"
      Environment:
        Variables:
          SLACK_HOOK_URL:
            Ref: SlackHookUrl
          SLACK_CHANNE_NAME:
            Ref: SlackChannelName
      Events:
        SNSEvent:
          Properties:
            Topic:
              Ref: EnqueteVotesSNSAlert
          Type: SNS
      FunctionName: sendSlackMessage
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - IAMRoleForLambda
        - Arn
      Timeout: 30
  LambdaSendSlackMessageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${LambdaSendSlackMessage}
      RetentionInDays: 60
  EnqueteVotesSNSAlert:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName:
        Fn::Sub: System Notifications from ${AWS::StackName}
      TopicName:
        Fn::Sub: ${AWS::StackName}-system-notifications
  AlarmSNSNumberOfNotificationsFailed:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmDescription:
        Fn::Sub: "*SNS* (${AWS::StackName}) \u3067 *\u901A\u77E5\u30A8\u30E9\u30FC\
          * \u304C\u767A\u751F\u3057\u3066\u3044\u307E\u3059\u3002"
      AlarmName:
        Fn::Sub: Warning-SNS-${AWS::StackName}-NumberOfNotificationsFailed-Occured
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: TopicName
        Value:
          Fn::GetAtt:
          - EnqueteVotesSNSAlert
          - TopicName
      EvaluationPeriods: 1
      MetricName: NumberOfNotificationsFailed
      Namespace: AWS/SNS
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
