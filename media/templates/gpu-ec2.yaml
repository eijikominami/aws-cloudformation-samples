AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWSCloudFormationSamples/media/gpu-ec2 creates an environment for editing, live switching using a GPU instance.

Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups: 
      - Label: 
          default: 'EC2 Configuration'
        Parameters: 
          - EC2ImageId
          - EC2KeyName
          - EC2InstanceType
          - EC2VolumeSize
          - HostAccessCIDR
      - Label: 
          default: 'EC2 Configuration'
        Parameters: 
          - SubnetPublicCidrBlockForAz1
          - SubnetPrivateCidrBlockAz1
          - SubnetPublicCidrBlockForAz2
          - SubnetPrivateCidrBlockAz2
          - VPCCidrBlock
      - Label: 
          default: 'Tag Configuration'
        Parameters:
          - Environment 
          - TagKey
          - TagValue

Parameters:
  EC2ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base
    Description: The EC2 Image Id [required]
  EC2KeyName:
    Type: String
    Default: ''
    Description: The name of an existing EC2 KeyPair to enable SSH access to the instance
  EC2InstanceType:
    Type: String
    Default: g4dn.4xlarge
    Description: The EC2 Instance Type [required]
  EC2VolumeSize:
    Type: Number
    Default: 100
    MinValue: 8
    Description: EC2 Volume Size [required]
  HostAccessCIDR:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR Block for the edit Host to control authorized access.
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  SubnetPublicCidrBlockForAz1:
    Type: String
    Default: 10.0.128.0/20
    AllowedPattern: ^[0-9./]*$
    Description: The public subnet CIDR block at AZ1 [required]
  SubnetPrivateCidrBlockAz1:
    Type: String
    Default: 10.0.0.0/19
    AllowedPattern: ^[0-9./]*$
    Description: The private subnet CIDR block at AZ1 [required]
  SubnetPublicCidrBlockForAz2:
    Type: String
    Default: 10.0.144.0/20
    AllowedPattern: ^[0-9./]*$
    Description: The public subnet CIDR block at AZ2 [required]
  SubnetPrivateCidrBlockAz2:
    Type: String
    Default: 10.0.32.0/19
    AllowedPattern: ^[0-9./]*$
    Description: The private subnet CIDR block at AZ2 [required]
  VPCCidrBlock:
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: ^[0-9./]*$
    Description: The VPC CIDR block [required]
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - production
      - test
      - development
  TagKey:
    Type: String
    Default: createdby
    AllowedPattern: .+
  TagValue:
    Type: String
    Default: aws-cloudformation-templates
    AllowedPattern: .+

Resources:
  # Nested Stack
  Az1:
    DependsOn:
      # NATGateway requires provisioned Internet Gateway.
      - InternetGatewayAttachment
    Type: AWS::Serverless::Application
    Properties:
      Parameters:
        AvailabilityZone: !Select 
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
        InternetGatewayId: !Ref InternetGateway
        SubnetPublicCidrBlock: !Ref SubnetPublicCidrBlockForAz1
        SubnetPrivateCidrBlock: !Ref SubnetPrivateCidrBlockAz1 
        VPCId: !Ref VPC
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/availability-zone
        SemanticVersion: 2.1.6
  Az2:
    DependsOn:
      # NATGateway requires provisioned Internet Gateway.
      - InternetGatewayAttachment
    Type: AWS::Serverless::Application
    Properties:
      Parameters:
        AvailabilityZone: !Select
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
        InternetGatewayId: !Ref InternetGateway
        LogicalNamePrefix: !Ref AWS::StackName
        SubnetPublicCidrBlock: !Ref SubnetPublicCidrBlockForAz2
        SubnetPrivateCidrBlock: !Ref SubnetPrivateCidrBlockAz2
        VPCId: !Ref VPC
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue 
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/availability-zone
        SemanticVersion: 2.1.6
  # IAM
  IAMRoleForEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonSSMMaintenanceWindowRole
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Description: A role required for GPU instances.
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::solutions-${AWS::Region}/aws-edit-in-the-cloud/v2.3.2*
                Effect: Allow
              - Action:
                  - s3:ListBucket
                Resource: arn:aws:s3:::ec2-windows-nvidia-drivers
                Effect: Allow
              - Action:
                  - s3:GetObject
                Resource: arn:aws:s3:::ec2-windows-nvidia-drivers/*
                Effect: Allow
              - Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::dcv-license.${AWS::Region}/*
                Effect: Allow
              - Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::eijikominami/aws-cloudformation-samples/media/*
                Effect: Allow
          PolicyName: S3
      RoleName: !Sub ${AWS::StackName}-AWSEC2Role-${AWS::Region}
  # InstanceProfile
  IamInstanceProfileForIAMRoleForEC2:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Ref IAMRoleForEC2
      Roles:
        - !Ref IAMRoleForEC2
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VPCCidrBlock
      Tags:
        - Key: Name
          Value: !Sub vpc-${AWS::StackName}-${AWS::Region}
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # Internet GW
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: !Sub igw-${AWS::StackName}-${AWS::Region}
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  # Elastic IP
  EIPForEC2Instance:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub eip-${AWS::StackName}-${AWS::Region}-ec2
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref EC2
      EIP: !Ref EIPForEC2Instance
  # EC2
  EC2:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref IAMRoleForEC2
          buckets:
            - !Sub solutions-${AWS::Region}
            - !Sub eijikominami
      AWS::CloudFormation::Init:
        configSets:
          config:
            - setup
            - configInstance
            - installNICEDCV
            - installAdditionalPackages
            - finalize
        setup:
          services:
            windows:
              Audiosrv:
                ensureRunning: 'true'
                enabled: 'true'
          files:
            C:\cfn\scripts\Unzip-Archive.ps1:
              source: !Sub 'https://solutions-${AWS::Region}.s3.${AWS::URLSuffix}/aws-edit-in-the-cloud/v2.3.2/Unzip-Archive.ps1'
              authentication: S3AccessCreds
            C:\cfn\modules\AWSQuickStart.zip:
              source: !Sub 'https://solutions-${AWS::Region}.s3.${AWS::URLSuffix}/aws-edit-in-the-cloud/v2.3.2/AWSQuickStart.zip'
              authentication: S3AccessCreds
          commands:
            a-set-execution-policy:
              command: powershell.exe -Command "Set-ExecutionPolicy RemoteSigned -Force"
              waitAfterCompletion: '0'
            b-unpack-quickstart-module:
              command: powershell.exe -Command C:\cfn\scripts\Unzip-Archive.ps1 -Source
                C:\cfn\modules\AWSQuickStart.zip -Destination C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
              waitAfterCompletion: '0'
            c-init-quickstart-module:
              command: !Join
                - ''
                - - powershell.exe -Command "
                  - New-AWSQuickStartResourceSignal -Stack '
                  - !Ref 'AWS::StackName'
                  - ''' -Resource ''EC2'' -Region '''
                  - !Ref 'AWS::Region'
                  - '''"'
              waitAfterCompletion: '0'
        configInstance:
          files:
            C:\cfn\scripts\install-packages.ps1:
              source: !Sub 'https://solutions-${AWS::Region}.s3.${AWS::URLSuffix}/aws-edit-in-the-cloud/v2.3.2/install-packages.ps1'
              authentication: S3AccessCreds
            C:\cfn\scripts\install-gpu-drivers.ps1:
              source: !Sub 'https://solutions-${AWS::Region}.s3.${AWS::URLSuffix}/aws-edit-in-the-cloud/v2.3.2/install-gpu-drivers.ps1'
              authentication: S3AccessCreds
            C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\automount.bat:
              content: !Sub |
                    @echo OFF

                    if NOT "%username%" == "Administrator" (
                      
                    ) else (
                      echo Administrator Login - No network mounts
                    ) 
          commands:
            '01-install-packages':
              command: 'powershell.exe -ExecutionPolicy Unrestricted C:\cfn\scripts\install-packages.ps1 -Verbose'
              waitAfterCompletion: '0'
            '05-install-gpu-drivers':
              command: 'powershell.exe -ExecutionPolicy Unrestricted C:\cfn\scripts\install-gpu-drivers.ps1 -Verbose'
              waitAfterCompletion: '0'
            # '10-reboot':
            #   command: 'powershell.exe -ExecutionPolicy Unrestricted C:\cfn\scripts\Restart-Computer.ps1'
            #   waitAfterCompletion: forever
        installNICEDCV:
          files: 
            C:\cfn\scripts\install-nicedcv.ps1:
              source: !Sub 'https://solutions-${AWS::Region}.s3.${AWS::URLSuffix}/aws-edit-in-the-cloud/v2.3.2/install-nicedcv.ps1'
              authentication: S3AccessCreds
            C:\Program Files\NICE\DCV\Server\conf\console-permissions.txt:
              content: |
                [permissions]
                %owner% allow builtin
                %any% allow builtin
          commands:
            '01-install-nicedcv':
              command: 'powershell.exe -ExecutionPolicy Unrestricted C:\cfn\scripts\install-nicedcv.ps1 -Verbose'
              waitAfterCompletion: '0'
        installAdditionalPackages:
          files:
            C:\cfn\scripts\install-additional-Packages.ps1:
              source: !Sub 'https://eijikominami.s3.${AWS::URLSuffix}/aws-cloudformation-samples/media/install-additional-Packages.ps1'
              authentication: S3AccessCreds  
          commands:
            '01-install-additional-packages':
              command: 'powershell.exe -ExecutionPolicy Unrestricted C:\cfn\scripts\install-additional-Packages.ps1 -Verbose'
              waitAfterCompletion: '0'  
        restartComputer:
          files:
            C:\cfn\scripts\Restart-Computer.ps1:
              source: !Sub 'https://solutions-${AWS::Region}.s3.${AWS::URLSuffix}/aws-edit-in-the-cloud/v2.3.2/Restart-Computer.ps1'
              authentication: S3AccessCreds
          commands:
            '01-restart-computer':
              command: 'powershell.exe -ExecutionPolicy Unrestricted C:\cfn\scripts\Restart-Computer.ps1'
              waitAfterCompletion: forever    
        finalize:
          commands:
            1-signal-success:
              command: powershell.exe -Command "Write-AWSQuickStartStatus"
              waitAfterCompletion: '0'
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: !Ref EC2VolumeSize
            VolumeType: gp3
      IamInstanceProfile: !Ref IamInstanceProfileForIAMRoleForEC2
      InstanceType: !Ref EC2InstanceType
      ImageId: !Ref EC2ImageId
      Tags:
        - Key: Name
          Value: !Sub ec2-${AWS::StackName}-${AWS::Region}
      Monitoring: true
      ## Removed so that CFN can rollback successfully 
      # DisableApiTermination: true
      NetworkInterfaces:
        - GroupSet:
            - !Ref SecurityGroup
          DeviceIndex: '0'
          SubnetId: !GetAtt Az1.Outputs.PublicSubnetId
      KeyName: !Ref EC2KeyName
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<script>\n"
            - 'cfn-init.exe --configsets config -v --stack '
            - !Ref 'AWS::StackName'
            - ' --resource EC2'
            - ' --region '
            - !Ref 'AWS::Region'
            - "\n"
            - "</script>\n"
  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      # 'sg-' prefix is NOT permitted.
      GroupName: !Sub sgp-${AWS::StackName}-${AWS::Region}
      GroupDescription: Security Group
      SecurityGroupEgress:
        - IpProtocol: udp
          Description: All UDP Traffic
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          Description: All TCP Traffic
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: Microsoft Remote Desktop
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref HostAccessCIDR
        - IpProtocol: tcp
          Description: "NICE DCV"
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref HostAccessCIDR
        - IpProtocol: udp
          Description: "NICE DCV"
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref HostAccessCIDR
      Tags:
        - Key: Name
          Value: !Sub sgp-${AWS::StackName}-${AWS::Region}-web
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      VpcId: !Ref VPC

Outputs:
  EditInstanceSG:
    Value: !Ref SecurityGroup
    Description: The Security Group
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2
  InstanceIPAddress:
    Description: IP address of the newly created EC2 instance
    Value: !Ref EIPForEC2Instance