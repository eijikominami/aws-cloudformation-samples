AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A Lambda function to send a message regularly with a channel list.

Globals:
  Function:
    Handler: lambda_function.lambda_handler
    Runtime: python3.9
    Tracing: Active

Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups: 
      - Label: 
          default: 'Slack Configuration'
        Parameters:
          - AccessToken
          - Encrypt
          - HookUrl
          - ScheduleExpression
          - Text
      - Label: 
          default: 'Tag Configuration'
        Parameters:
          - Environment
          - TagKey
          - TagValue

Parameters:
  AccessToken:
    Type: String
    Default: ''
    NoEcho: true
    Description: Slack access token
  Encrypt:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: Enable or disable encryption [required]
  HookUrl:
    Type: String
    Default: ''
    NoEcho: true
    Description: Slack Hook Url without schema string (e.g. hooks.slack.com/services/XXXXX) [required]
  ScheduleExpression:
    Type: String
    Default: 'cron(0 10 1 * ? *)'
    Description: The scheduling expression [required]
  SNSForAlertArn:
    Type: String
    Default: '' 
  SNSForDeploymentArn:
    Type: String
    Default: ''
  Text:
    Type: String
    Default: ''
    Description: Text in Slack message
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - production
      - test
      - development
  TagKey:
    Type: String
    Default: createdby
    AllowedPattern: .+
  TagValue:
    Type: String
    Default: aws-cloudformation-samples
    AllowedPattern: .+

Conditions:
  CreateSNSForAlert: !Equals [ !Ref SNSForAlertArn, '']
  CreateSNSForDeployment: !Equals [ !Ref SNSForDeploymentArn, '']
  CreateKMSKey: !Equals [ !Ref Encrypt, 'true'] 

Resources:
  # Nested Stack
  SNSForAlert:
    Condition: CreateSNSForAlert
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.0.31
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        TopicName: !Sub Alert-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  SNSForDeployment:
    Condition: CreateSNSForDeployment
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.0.31
      Parameters:
        TopicName: !Sub Deployment-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  # IAM
  IAMRoleForLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: A role required for Lambda to access X-Ray, KMS and CloudWatch Logs.
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: SNS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: '*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: '*' 
        - !If
          - CreateKMSKey
          - PolicyName: KMS
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - kms:Decrypt
                  Resource: !GetAtt KMSKey.Arn
          - !Ref AWS::NoValue
      RoleName: !Sub ${AWS::StackName}-LambdaForSlack-${AWS::Region}
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  IAMRoleForLambdaEvents:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Description: A role required for EventBridge to access Lambda.
      Policies:
        - PolicyName: Lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'
      RoleName: !Sub ${AWS::StackName}-LambdaEvents-${AWS::Region}
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # KMS
  KMSKey:
    Condition: CreateKMSKey
    Type: AWS::KMS::Key
    Properties: 
      Description: Encrypt Slack Webhook URL
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy: 
        Version: 2012-10-17
        Id: DefaultKeyPolicy
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: 'kms:*'
            Resource: '*'
      KeyUsage: ENCRYPT_DECRYPT
      PendingWindowInDays: 30
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # Lambda
  LambdaSendChannelList:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sendChannelList/
      Description: チャンネルリストをSlackに送信します。
      Environment:
        Variables:
          ACCESS_TOKEN: !Ref AccessToken
          ENCRYPT: !Ref Encrypt
          HOOK_URL: !Ref HookUrl
          TEXT: !Ref Text
      FunctionName: !Sub sendChannelList-createdby-${AWS::StackName}
      KmsKeyArn: !If
        - CreateKMSKey
        - !GetAtt KMSKey.Arn
        - !Ref AWS::NoValue
      MemorySize: 512
      Role: !GetAtt IAMRoleForLambda.Arn
      Timeout: 30
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  LogGroupForLambdaSendChannelList:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /aws/lambda/${LambdaSendChannelList}
      RetentionInDays: 60
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # EventBridge for Lambda
  CloudWatchEventsForLambda:
    Type: AWS::Events::Rule
    Properties: 
      Description: !Sub Scheduled ${LambdaSendChannelList}
      Name: !Ref AWS::StackName
      RoleArn: !GetAtt IAMRoleForLambdaEvents.Arn
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaSendChannelList.Arn
          Id: CloudWatchEventsForLambda
  AlarmEventsForLambda:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-events
        SemanticVersion: 2.0.31
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        CustomAlarmName: !Ref AWS::StackName
        SNSTopicArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        EventsRuleName: !Ref CloudWatchEventsForLambda
      Tags:
        createdby: !Ref TagValue